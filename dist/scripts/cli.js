import { createRequire } from 'module';const require = createRequire(import.meta.url); const __filename = import.meta.filename; const __dirname = import.meta.dirname;
import{a as O,b as h,c as d,d as L,e as _}from"./chunk-WYO2BRPS.js";import{program as V}from"@commander-js/extra-typings";import y from"node:path";import M from"node:child_process";var C="1.0.0";import{createCommand as m,Option as g}from"@commander-js/extra-typings";import{findUp as Q}from"find-up";import q from"configstore";import{z as o}from"zod";import I from"detect-port";var f=o.object({server:o.object({port:o.number(),pid:o.number()}).optional()}).optional().default({}),T=new q("localsandbox",{config:f.parse(void 0)}),u=()=>f.safeParse(T.get("config")).data??{},l=e=>{T.set("config",f.parse(e))},S=async e=>{let s=e.server&&await I(e.server.port)!==e.server.port;return s||l({...e,server:void 0}),s},P=new g("-p --port <PORT>","Port to run the API server on").argParser(e=>o.coerce.number().parse(e)).env("LOCALSANDBOX_PORT").default(O),A=new g("--amqp-port <PORT>","Port to run the AMQP broker on").argParser(e=>o.coerce.number().parse(e)).env("LOCALSANDBOX_AMQP_PORT").default(h),b=new g("-l --log-level <LEVEL>","Log level").env("LOG_LEVEL").choices(["info","debug","error","warn","trace"]).argParser(e=>e.toLowerCase()).default("info"),w=e=>{let s=e,x=s.createCommand("run").description("Start LocalSandbox server").addOption(b).addOption(P).addOption(A).action(async({port:r,amqpPort:t,logLevel:n})=>{let i=d({LOCALSANDBOX_PORT:r,LOCALSANDBOX_AMQP_PORT:t,LOG_LEVEL:n});await _({env:i})}),E=m("start").description("Start LocalSandbox server in the background").addOption(b).addOption(P).addOption(A).action(async({port:r,amqpPort:t,logLevel:n})=>{let i=d({LOCALSANDBOX_PORT:r,LOCALSANDBOX_AMQP_PORT:t,LOG_LEVEL:n}),a=console,z=u(),v=await Q("package.json",{cwd:import.meta.dirname});if(!v){a.error("Could not find root package.json"),process.exitCode=1;return}if(!await L({env:i,logger:a})){process.exitCode=1;return}let R=y.dirname(v),D=y.join(R,"dist/scripts/start-server.js"),c=M.fork(D,{detached:!0,stdio:"ignore",env:{...process.env,...Object.fromEntries(Object.entries(i).map(([N,B])=>[N,B.toString()]))}});c.disconnect(),c.unref();let{pid:p}=c;if(p==null){a.error("Failed to fork process!"),process.exitCode=1;return}l({...z,server:{port:i.LOCALSANDBOX_PORT,pid:p}}),a.info(`Server started on pid ${p}`)}),k=m("stop").description("Stop server running in the background").action(async()=>{let r=u(),t=console;if(!await S(r)){t.error("Server is not running!"),process.exitCode=1;return}try{process.kill(r.server.pid),l({...r,server:void 0}),t.info("Server stopped")}catch(n){t.error("Failed to stop server",{err:n}),process.exitCode=1}}),j=m("status").description("Check the status of the running server").action(async()=>{let r=u(),t=console;r.server?await S(r)?t.info(`Server is running on port ${r.server.port}, pid ${r.server.pid}`):t.info(`Server crashed (pid ${r.server.pid})`):t.info("Server is not running")});s.version(C).addCommand(x).addCommand(E).addCommand(k).addCommand(j).parse()};w(V);
